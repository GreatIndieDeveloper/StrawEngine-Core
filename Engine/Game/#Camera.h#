#pragma once
#include "../IO/Window.h"
#include "../Math/Math.h"
#include <iostream>
class Camera {
public:
  Camera();
  ~Camera();
  X_Vector position =
      X_Vector(Window::S_WIDTH / 2.f, Window::S_HEIGHT / 2.f, 0);
  static Camera main;
  glm::mat4 Projection =
      glm::ortho(-0.5f, (Window::S_WIDTH - 1) + 0.5f, -0.5f,
                 (Window::S_HEIGHT - 1.0f) + 0.5f, -1000.f, 1000.f);
  // glm::mat4 Projection = glm::ortho(0.f, (float)Window::S_WIDTH,
  // (float)Window::S_HEIGHT, 0.f,-1000.f,1000.f);
  inline glm::mat4 getViewMatrix() {
    glm::mat4 view = glm::mat4(1.0f);
    view = glm::translate(view, X_Vector::ToVec<glm::vec3>(this->position));
    return view;
  };
  inline X_Vector ScreenToWorld(X_Vector inpoint) {
    float xpos = 2.0f * (inpoint.x / Window::S_WIDTH) - 1;
    float ypos = -2.0f * (inpoint.y / Window::S_HEIGHT) + 1;
    X_Vector point = X_Vector(xpos, ypos);

    glm::mat4 PV = Projection * getViewMatrix();
    glm::mat4 end = glm::inverse(PV);
    glm::vec4 p4 = glm::vec4(point.x, point.y, 0.0f, 1.0f);
    glm::vec4 res = p4 * end;
    return X_Vector::fromVec<glm::vec4>(res);
  };
};
